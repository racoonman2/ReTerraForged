package raccoonman.reterraforged.common.registries;

import com.mojang.serialization.Codec;

import net.minecraft.resources.ResourceKey;
import raccoonman.reterraforged.common.ReTerraForged;
import raccoonman.reterraforged.common.level.levelgen.noise.module.Valley.ValleyNoise;
import raccoonman.reterraforged.common.noise.Noise;
import raccoonman.reterraforged.common.noise.combiner.Add;
import raccoonman.reterraforged.common.noise.combiner.Max;
import raccoonman.reterraforged.common.noise.combiner.Min;
import raccoonman.reterraforged.common.noise.combiner.Mul;
import raccoonman.reterraforged.common.noise.combiner.Sub;
import raccoonman.reterraforged.common.noise.modifier.Abs;
import raccoonman.reterraforged.common.noise.modifier.AdvancedTerrace;
import raccoonman.reterraforged.common.noise.modifier.Alpha;
import raccoonman.reterraforged.common.noise.modifier.Bias;
import raccoonman.reterraforged.common.noise.modifier.Boost;
import raccoonman.reterraforged.common.noise.modifier.Cache;
import raccoonman.reterraforged.common.noise.modifier.Clamp;
import raccoonman.reterraforged.common.noise.modifier.Curve;
import raccoonman.reterraforged.common.noise.modifier.Freq;
import raccoonman.reterraforged.common.noise.modifier.Grad;
import raccoonman.reterraforged.common.noise.modifier.Invert;
import raccoonman.reterraforged.common.noise.modifier.LegacyTerrace;
import raccoonman.reterraforged.common.noise.modifier.Map;
import raccoonman.reterraforged.common.noise.modifier.Modulate;
import raccoonman.reterraforged.common.noise.modifier.Power;
import raccoonman.reterraforged.common.noise.modifier.PowerCurve;
import raccoonman.reterraforged.common.noise.modifier.Scale;
import raccoonman.reterraforged.common.noise.modifier.Shift;
import raccoonman.reterraforged.common.noise.modifier.Steps;
import raccoonman.reterraforged.common.noise.modifier.Terrace;
import raccoonman.reterraforged.common.noise.modifier.Threshold;
import raccoonman.reterraforged.common.noise.modifier.VariableCurve;
import raccoonman.reterraforged.common.noise.modifier.Warp;
import raccoonman.reterraforged.common.noise.selector.Base;
import raccoonman.reterraforged.common.noise.selector.Blend;
import raccoonman.reterraforged.common.noise.selector.MultiBlend;
import raccoonman.reterraforged.common.noise.selector.Select;
import raccoonman.reterraforged.common.noise.selector.VariableBlend;
import raccoonman.reterraforged.common.noise.source.Billow;
import raccoonman.reterraforged.common.noise.source.Cell;
import raccoonman.reterraforged.common.noise.source.CellEdge;
import raccoonman.reterraforged.common.noise.source.Constant;
import raccoonman.reterraforged.common.noise.source.Cubic;
import raccoonman.reterraforged.common.noise.source.LegacySimplex;
import raccoonman.reterraforged.common.noise.source.Perlin;
import raccoonman.reterraforged.common.noise.source.Rand;
import raccoonman.reterraforged.common.noise.source.Ridge;
import raccoonman.reterraforged.common.noise.source.Simplex;
import raccoonman.reterraforged.common.noise.source.SimplexRidge;
import raccoonman.reterraforged.common.noise.source.Sin;
import raccoonman.reterraforged.platform.registries.RegistryUtil;

public final class RTFNoiseTypes {
	public static final ResourceKey<Codec<? extends Noise>> CONSTANT = resolve("constant");
	public static final ResourceKey<Codec<? extends Noise>> BILLOW = resolve("billow");
	public static final ResourceKey<Codec<? extends Noise>> CELL = resolve("cell");
	public static final ResourceKey<Codec<? extends Noise>> CELL_EDGE = resolve("cell_edge");
	public static final ResourceKey<Codec<? extends Noise>> CUBIC = resolve("cubic");
	public static final ResourceKey<Codec<? extends Noise>> PERLIN = resolve("perlin");
	public static final ResourceKey<Codec<? extends Noise>> RIDGE = resolve("ridge");
	public static final ResourceKey<Codec<? extends Noise>> LEGACY_SIMPLEX = resolve("legacy_simplex");
	public static final ResourceKey<Codec<? extends Noise>> SIMPLEX = resolve("simplex");
	public static final ResourceKey<Codec<? extends Noise>> SIMPLEX_RIDGE = resolve("simplex_ridge");
	public static final ResourceKey<Codec<? extends Noise>> SIN = resolve("sin");
	public static final ResourceKey<Codec<? extends Noise>> LINE = resolve("line");
	public static final ResourceKey<Codec<? extends Noise>> RAND = resolve("rand");
	public static final ResourceKey<Codec<? extends Noise>> ADD = resolve("add");
	public static final ResourceKey<Codec<? extends Noise>> MAX = resolve("max");
	public static final ResourceKey<Codec<? extends Noise>> MIN = resolve("min");
	public static final ResourceKey<Codec<? extends Noise>> MUL = resolve("mul");
	public static final ResourceKey<Codec<? extends Noise>> SUB = resolve("sub");
	public static final ResourceKey<Codec<? extends Noise>> ABS = resolve("abs");
	public static final ResourceKey<Codec<? extends Noise>> ADVANCED_TERRACE = resolve("advanced_terrace");
	public static final ResourceKey<Codec<? extends Noise>> ALPHA = resolve("alpha");
	public static final ResourceKey<Codec<? extends Noise>> BIAS = resolve("bias");
	public static final ResourceKey<Codec<? extends Noise>> BOOST = resolve("boost");
	public static final ResourceKey<Codec<? extends Noise>> CACHE = resolve("cache");
	public static final ResourceKey<Codec<? extends Noise>> CLAMP = resolve("clamp");
	public static final ResourceKey<Codec<? extends Noise>> CURVE = resolve("curve");
	public static final ResourceKey<Codec<? extends Noise>> FREQ = resolve("freq");
	public static final ResourceKey<Codec<? extends Noise>> GRAD = resolve("grad");
	public static final ResourceKey<Codec<? extends Noise>> INVERT = resolve("invert");
	public static final ResourceKey<Codec<? extends Noise>> LEGACY_TERRACE = resolve("legacy_terrace");
	public static final ResourceKey<Codec<? extends Noise>> MAP = resolve("map");
	public static final ResourceKey<Codec<? extends Noise>> MODULATE = resolve("modulate");
	public static final ResourceKey<Codec<? extends Noise>> POWER = resolve("power");
	public static final ResourceKey<Codec<? extends Noise>> POWER_CURVE = resolve("power_curve");
	public static final ResourceKey<Codec<? extends Noise>> SCALE = resolve("scale");
	public static final ResourceKey<Codec<? extends Noise>> SHIFT = resolve("shift");
	public static final ResourceKey<Codec<? extends Noise>> STEPS = resolve("steps");
	public static final ResourceKey<Codec<? extends Noise>> TERRACE = resolve("terrace");
	public static final ResourceKey<Codec<? extends Noise>> THRESHOLD = resolve("threshold");
	public static final ResourceKey<Codec<? extends Noise>> VARIABLE_CURVE = resolve("variable_curve");
	public static final ResourceKey<Codec<? extends Noise>> WARP = resolve("warp");
	public static final ResourceKey<Codec<? extends Noise>> BASE = resolve("base");
	public static final ResourceKey<Codec<? extends Noise>> BLEND = resolve("blend");
	public static final ResourceKey<Codec<? extends Noise>> MULTI_BLEND = resolve("multi_blend");
	public static final ResourceKey<Codec<? extends Noise>> SELECT = resolve("select");
	public static final ResourceKey<Codec<? extends Noise>> VARIABLE_BLEND = resolve("variable_blend");
	public static final ResourceKey<Codec<? extends Noise>> VALLEY = resolve("valley");
	
	public static void register() {
		RegistryUtil.register(CONSTANT, () -> Constant.CODEC);
		RegistryUtil.register(BILLOW, () -> Billow.CODEC);
		RegistryUtil.register(CELL, () ->  Cell.CODEC);
		RegistryUtil.register(CELL_EDGE, () ->  CellEdge.CODEC);
		RegistryUtil.register(CUBIC, () -> Cubic.CODEC);
		RegistryUtil.register(PERLIN, () -> Perlin.CODEC);
		RegistryUtil.register(RIDGE, () -> Ridge.CODEC);
		RegistryUtil.register(LEGACY_SIMPLEX, () -> LegacySimplex.CODEC);
		RegistryUtil.register(SIMPLEX, () -> Simplex.CODEC);
		RegistryUtil.register(SIMPLEX_RIDGE, () -> SimplexRidge.CODEC);
		RegistryUtil.register(SIN, () -> Sin.CODEC);
		RegistryUtil.register(RAND, () -> Rand.CODEC);
		RegistryUtil.register(ADD, () -> Add.CODEC);
		RegistryUtil.register(MAX, () -> Max.CODEC);
		RegistryUtil.register(MIN, () -> Min.CODEC);
		RegistryUtil.register(MUL, () -> Mul.CODEC);
		RegistryUtil.register(SUB, () -> Sub.CODEC);
		RegistryUtil.register(ABS, () -> Abs.CODEC);
		RegistryUtil.register(ADVANCED_TERRACE, () -> AdvancedTerrace.CODEC);
		RegistryUtil.register(ALPHA, () -> Alpha.CODEC);
		RegistryUtil.register(BIAS, () -> Bias.CODEC);
		RegistryUtil.register(BOOST, () -> Boost.CODEC);
		RegistryUtil.register(CACHE, () -> Cache.CODEC);
		RegistryUtil.register(CLAMP, () -> Clamp.CODEC);
		RegistryUtil.register(CURVE, () -> Curve.CODEC);
		RegistryUtil.register(FREQ, () -> Freq.CODEC);
		RegistryUtil.register(GRAD, () -> Grad.CODEC);
		RegistryUtil.register(INVERT, () -> Invert.CODEC);
		RegistryUtil.register(LEGACY_TERRACE, () -> LegacyTerrace.CODEC);
		RegistryUtil.register(MAP, () -> Map.CODEC);
		RegistryUtil.register(MODULATE, () -> Modulate.CODEC);
		RegistryUtil.register(POWER, () -> Power.CODEC);
		RegistryUtil.register(POWER_CURVE, () -> PowerCurve.CODEC);
		RegistryUtil.register(SCALE, () -> Scale.CODEC);
		RegistryUtil.register(SHIFT, () -> Shift.CODEC);
		RegistryUtil.register(STEPS, () -> Steps.CODEC);
		RegistryUtil.register(TERRACE, () -> Terrace.CODEC);
		RegistryUtil.register(THRESHOLD, () -> Threshold.CODEC);
		RegistryUtil.register(VARIABLE_CURVE, () -> VariableCurve.CODEC);
		RegistryUtil.register(WARP, () -> Warp.CODEC);
		RegistryUtil.register(BASE, () -> Base.CODEC);
		RegistryUtil.register(BLEND, () -> Blend.CODEC);
		RegistryUtil.register(MULTI_BLEND, () -> MultiBlend.CODEC);
		RegistryUtil.register(SELECT, () -> Select.CODEC);
		RegistryUtil.register(VARIABLE_BLEND, () -> VariableBlend.CODEC);
		RegistryUtil.register(VALLEY, () -> ValleyNoise.CODEC);
	}
	
	private static ResourceKey<Codec<? extends Noise>> resolve(String path) {
		return ReTerraForged.resolve(RTFRegistries.NOISE_TYPE, path);
	}
}
