plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

//apply plugin: 'org.spongepowered.mixin'

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    common(project(path: ":common", configuration: "namedElements")) { 
    	transitive false 
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { 
    	transitive = false 
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                 project(":common").file("src/main/resources").absolutePath
            ]
        }
    }
}

loom {
    forge {
        dataGen {
            mod "reterraforged"
        }
        mixinConfig "reterraforged.mixins.json"
    }
}


processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from { 
    	commonSources.archiveFile.map { zipTree(it) } 
    } {
    	exclude "reterraforged.accesswidener", "pack.mcmeta", "reterraforged.mixins.json"
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
    }
}